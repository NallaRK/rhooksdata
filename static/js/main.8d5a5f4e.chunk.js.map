{"version":3,"sources":["components/NavBar.js","components/SideBar.js","utils/useFetchData.js","components/GetData.js","components/ShowData.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","AppBar","position","Toolbar","Typography","variant","color","SideBar","Grid","container","spacing","item","xs","href","style","display","padding","useFetchData","url","useState","data","setData","useEffect","a","fetch","response","json","fetchData","GetData","props","render","StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","white","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","useStyles","makeStyles","width","marginTop","overflowX","table","minWidth","ShowData","classes","Paper","className","Table","TableHead","align","TableBody","Fragment","map","el","key","name","component","scope","email","website","address","city","phone","text","primary","icon","margin","App","page","setPage","TextField","id","placeholder","onChange","event","target","value","length","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d5a5f4e.chunk.js","sourcesContent":["import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nconst NavBar = () => {\n    return(\n        <div>\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography variant=\"title\" color=\"inherit\">\n                    Search below for Results\n                </Typography>\n            </Toolbar>\n        </AppBar>\n        </div>\n    )\n}\nexport default NavBar;\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nconst SideBar = () => {\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <Typography variant=\"title\" color=\"inherit\">\n                    Popular Links\n                </Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <a href=\"#\" style={{ display: 'block',padding:'5px'}}> This is good Link -1</a>\n                <a href=\"#\" style={{ display: 'block',padding:'5px'}}> This is good Link -2</a>\n                <a href=\"#\" style={{ display: 'block',padding:'5px'}}> This is good Link -3</a>\n                <a href=\"#\" style={{ display: 'block',padding:'5px'}}> This is good Link -4</a>\n                <a href=\"#\" style={{ display: 'block',padding:'5px'}}> This is good Link -5</a>\n                \n            </Grid>\n        </Grid>\n    )\n}\nexport default SideBar;\n","import { useState, useEffect } from 'react'\n\nfunction useFetchData(url) {\n    const [data, setData] = useState([]);\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch(url);\n            const data = await response.json();\n            setData(data);\n        }\n        fetchData();\n    }, [url]);\n    return data;\n}\n\nexport default useFetchData\n","import useFetchData from '../utils/useFetchData'\nfunction GetData(props) {\n    const data=useFetchData('https://jsonplaceholder.typicode.com/users?'+props.url)\n    return props.render(data)\n}\nexport default GetData","import React from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\nimport GetData from './GetData'\n\nconst StyledTableCell = withStyles(theme => ({\n    head: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.background.default,\n        },\n    },\n}))(TableRow);\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing(3),\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 700,\n    },\n}));\n\nfunction ShowData(props) {\n    const classes = useStyles();\n\n    return (\n        <Paper className={classes.root}>\n            <Table className={classes.table}>\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell>Name</StyledTableCell>\n                        <StyledTableCell align=\"right\">E Mail</StyledTableCell>\n                        <StyledTableCell align=\"right\">Web Site</StyledTableCell>\n                        <StyledTableCell align=\"right\">City</StyledTableCell>\n                        <StyledTableCell align=\"right\">Contact</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    <GetData\n                        render={\n                            data => {\n                                return (\n                                    <React.Fragment>                                        \n                                    {data.map(el => (\n                                        <StyledTableRow key={el.name}>\n                                            <StyledTableCell component=\"th\" scope=\"row\">\n                                                {el.name}\n                                            </StyledTableCell>\n                                            <StyledTableCell align=\"right\">{el.email}</StyledTableCell>\n                                            <StyledTableCell align=\"right\">{el.website}</StyledTableCell>\n                                            <StyledTableCell align=\"right\">{el.address.city}</StyledTableCell>\n                                            <StyledTableCell align=\"right\">{el.phone}</StyledTableCell>\n                                        </StyledTableRow>\n                                    ))}\n                                    </React.Fragment>\n\n                                )\n                            }\n                        }\n                        url={props.url}>\n\n                    </GetData>\n                </TableBody>\n            </Table>\n        </Paper>\n    )\n}\n\nexport default ShowData\n","import React, { useState } from \"react\";\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport NavBar from './components/NavBar'\nimport SideBar from './components/SideBar'\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport ShowData from './components/ShowData'\nimport './App.css';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    color: theme.palette.text.primary,\n  },\n  icon: {\n    margin: theme.spacing(1),\n    fontSize: 32,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const [page, setPage] = useState(1);\n  const onSearchInputChange = (event) => {\n    if (event.target.value.length > 5) {\n      setPage(page + 1);\n    }\n    else {\n\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <NavBar />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField style={{ padding: 24 }}\n            id=\"searchInput\"\n            placeholder=\"Search for data\"\n            margin=\"normal\"\n            onChange={onSearchInputChange}\n          />\n        </Grid>\n        {/* <button onClick={reloadData}>reload</button> */}\n     <Grid container spacing={2}>\n          <Grid item xs={2} className=\"sideBar\">\n            <SideBar />\n          </Grid>\n          <Grid item xs={8}>\n            <ShowData url={page} />\n          </Grid>\n        </Grid>\n      </Grid >\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}